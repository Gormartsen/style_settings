<?php

/**
 * Implementation of hook_preprocess_page().
 */
function style_settings_preprocess_page(&$variables) {
  $css = array();

  // Replace all theme stylesheets by the rewritten ones.
  foreach ($variables['css']['all']['theme'] as $old_path => $preprocess) {
		$css[style_settings_rewrite($old_path)] = $preprocess;
	} 
	  
	$variables['css']['all']['theme'] = $css;
	$variables['styles'] = drupal_get_css($variables['css']);
}

/**
 * Rewrite a style sheet and return the path to the rewritten one.
 */
function style_settings_rewrite($old_path) {
	global $theme_key, $conf;
	
	$settings = theme_get_settings($theme_key);
	$checksum	= md5(serialize($settings).serialize($conf).filectime($old_path));
	$new_path	= file_directory_path().'/style/'.$checksum.'.'.basename($old_path);
	
	if (!file_exists($new_path)) {
		file_check_directory(dirname($new_path), FILE_CREATE_DIRECTORY);
		$old_data = file_get_contents($old_path);
		
		// Prefix all paths, ignoring absolute paths.
		_drupal_build_css_path(NULL, base_path().dirname($old_path).'/');
		$new_data = preg_replace_callback('/url\([\'"]?(?![a-z]+:|\/+)([^\'")]+)[\'"]?\)/i', '_drupal_build_css_path', $old_data);
		
		// Replace all custom css
		$new_data = preg_replace_callback('/\/\*\s*(setting|variable)\s*:\s*([a-z0-9_]+)\s*\*\/(.*)\/\*\s*.*\s*\*\//iU', 'style_settings_replace', $new_data);
		
		file_save_data($new_data, $new_path, FILE_EXISTS_REPLACE);
	}

	return $new_path;
}

/**
 * Callback to replace custom css tags.
 */
function style_settings_replace($matches) {
	global $theme_key;
	static $settings;
	
	$type			= $matches[1];
	$name			= $matches[2];
	$original	= $matches[3];
	
	// Cache settings for next calls
	if ($type == 'setting' && !$settings) {	
		$settings = theme_get_settings($theme_key);
	}
	
	// Variable
	if ($type == 'variable') {
		$replacement = variable_get($name, NULL);
		
		if (!$replacement || !(is_string($replacement) || is_numeric($replacement))) {
			return $original;
		}		
		
	// Theme setting
	} else {
		$replacement = $settings[$name];
		
		if (!$replacement) {
			return $original;
		}
	}

	// Since a comment cannot be in url(), we have to add this around the replacement (if the user doesn't).
	if (preg_match('/url\(.*\)/i', $original) && !preg_match('/url\(.*\)/i', $replacement)) {
		
		// Prefix path, ignoring absolute paths.
		if (!preg_match('/^([a-z]+:|\/+)/', $replacement)) {
			$replacement = base_path().$replacement;
		}
		
		$replacement = "url('".$replacement."')";
	}

	return $replacement;
}

?>